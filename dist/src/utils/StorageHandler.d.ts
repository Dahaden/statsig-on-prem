import { StorageInterface } from "../interfaces/StorageInterface";
import { DynamicConfig, DynamicConfigUpdateArgs } from "../types/DynamicConfig";
import { EntityNames } from "../types/EntityNames";
import { Experiment, ExperimentUpdateArgs } from "../types/Experiment";
import { FeatureGate, FeatureGateUpdateArgs } from "../types/FeatureGate";
import { TargetAppNames } from "../types/TargetAppNames";
export default class StorageHandler {
    private storage;
    constructor(storage: StorageInterface);
    initialize(): Promise<void>;
    shutdown(): Promise<void>;
    getGate(name: string): Promise<FeatureGate | null>;
    addGate(gate: FeatureGate): Promise<void>;
    updateGate(gate: FeatureGate, args: FeatureGateUpdateArgs): Promise<void>;
    removeGate(name: string): Promise<void>;
    addTargetAppsToGate(gate: FeatureGate, targetApps: string[]): Promise<void>;
    removeTargetAppsFromGate(gate: FeatureGate, targetApps: string[]): Promise<void>;
    getConfig(name: string): Promise<DynamicConfig | null>;
    addConfig(config: DynamicConfig): Promise<void>;
    updateConfig(updated: DynamicConfig, args?: DynamicConfigUpdateArgs): Promise<void>;
    removeConfig(name: string): Promise<void>;
    addTargetAppsToConfig(config: DynamicConfig, targetApps: string[]): Promise<void>;
    removeTargetAppsFromConfig(config: DynamicConfig, targetApps: string[]): Promise<void>;
    getExperiment(name: string): Promise<Experiment | null>;
    addExperiment(experiment: Experiment): Promise<void>;
    updateExperiment(experiment: Experiment, args: ExperimentUpdateArgs): Promise<void>;
    removeExperiment(name: string): Promise<void>;
    addTargetAppsToExperiment(experiment: Experiment, targetApps: string[]): Promise<void>;
    removeTargetAppsFromExperiment(experiment: Experiment, targetApps: string[]): Promise<void>;
    addTargetApp(name: string, entities: EntityNames): Promise<void>;
    updateTargetApp(name: string, entities: EntityNames): Promise<void>;
    removeTargetApp(name: string): Promise<void>;
    addEntityAssocs(entities: Partial<EntityNames>, targetApp?: string): Promise<void>;
    removeEntityAssocs(entities: Partial<EntityNames>, targetApp?: string): Promise<void>;
    getSDKKeysForTargetApp(targetApp: string): Promise<Set<string> | null>;
    getTargetAppsFromSDKKey(sdkKey: string): Promise<TargetAppNames | null>;
    private addSDKKeyToTargetApp;
    assignTargetAppsToSDKKey(targetApps: string[], sdkKey: string): Promise<void>;
    private removeSDKKeyFromTargetApp;
    removeTargetAppsFromSDKKey(targetApps: string[], sdkKey: string): Promise<void>;
    clearTargetAppsFromSDKKey(sdkKey: string): Promise<void>;
    addSDKKey(sdkKey: string): Promise<Set<string>>;
    removeSDKKey(sdkKey: string): Promise<Set<string>>;
    getEntityAssocs(targetApp?: string): Promise<EntityNames | null>;
    getEntityAssocsForMultipleTargetApps(targetApps?: TargetAppNames | null): Promise<EntityNames | null>;
    getTargetAppNames(): Promise<TargetAppNames>;
    private updateEntityAssocs;
    private getEntity;
    private addEntity;
    private updateGateTargetApps;
    private updateConfigTargetApps;
    private updateExperimentTargetApps;
    private updateEntityTargetApps;
    private updateEntity;
    private removeEntity;
    private updateTargetAppNames;
    getRegisteredSDKKeys(): Promise<Set<string>>;
    private updateRegisteredSDKKeys;
    private updateSet;
    private getAssoc;
    private setAssoc;
    private deleteAssoc;
    updateSerialization__V0_0_8_BETA(): Promise<void>;
    private getAssoc__DEPRECATED;
}
